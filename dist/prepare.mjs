var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/partition-array/partition.js
var require_partition = __commonJS({
  "node_modules/partition-array/partition.js"(exports, module) {
    "use strict";
    module.exports = partition2;
    function partition2(arr, pred, lo, hi) {
      var n = arr.length;
      lo = typeof lo === "number" ? lo | 0 : 0;
      hi = typeof hi === "number" ? hi | 0 : n;
      var ptr = lo;
      for (var i = lo; i < hi; ++i) {
        var x = arr[i];
        if (pred(x)) {
          arr[i] = arr[ptr];
          arr[ptr] = x;
          ptr += 1;
        }
      }
      return ptr;
    }
  }
});

// prepare.mjs
var import_partition_array = __toESM(require_partition(), 1);

// node_modules/georender-pack/features.json
var features_default = [
  "aerialway.cable_car",
  "aerialway.canopy",
  "aerialway.chair_lift",
  "aerialway.drag_lift",
  "aerialway.gondola",
  "aerialway.goods",
  "aerialway.j-bar",
  "aerialway.magic_carpet",
  "aerialway.mixed_lift",
  "aerialway.other",
  "aerialway.platter",
  "aerialway.pylon",
  "aerialway.rope_tow",
  "aerialway.station",
  "aerialway.t-bar",
  "aerialway.zip_line",
  "aeroway.aerodrome",
  "aeroway.apron",
  "aeroway.gate",
  "aeroway.hangar",
  "aeroway.helipad",
  "aeroway.heliport",
  "aeroway.navigationaid",
  "aeroway.runway",
  "aeroway.spaceport",
  "aeroway.taxiway",
  "aeroway.terminal",
  "aeroway.windsock",
  "amenity.animal_boarding",
  "amenity.animal_shelter",
  "amenity.arts_centre",
  "amenity.atm",
  "amenity.baby_hatch",
  "amenity.baking_oven",
  "amenity.bank",
  "amenity.bar",
  "amenity.bbq",
  "amenity.bench",
  "amenity.bicycle_parking",
  "amenity.bicycle_rental",
  "amenity.bicycle_repair_station",
  "amenity.biergarten",
  "amenity.boat_rental",
  "amenity.boat_sharing",
  "amenity.brothel",
  "amenity.bureau_de_change",
  "amenity.bus_station",
  "amenity.cafe",
  "amenity.car_rental",
  "amenity.car_sharing",
  "amenity.car_wash",
  "amenity.casino",
  "amenity.charging_station",
  "amenity.childcare",
  "amenity.cinema",
  "amenity.clinic",
  "amenity.clock",
  "amenity.college",
  "amenity.community_centre",
  "amenity.conference_centre",
  "amenity.courthouse",
  "amenity.coworking_space",
  "amenity.crematorium",
  "amenity.crypt",
  "amenity.dentist",
  "amenity.dive_centre",
  "amenity.doctors",
  "amenity.dojo",
  "amenity.drinking_water",
  "amenity.driving_school",
  "amenity.embassy",
  "amenity.fast food",
  "amenity.ferry_terminal",
  "amenity.fire_station",
  "amenity.firepit",
  "amenity.food_court",
  "amenity.fountain",
  "amenity.fuel",
  "amenity.gambling",
  "amenity.game_feeding",
  "amenity.give_box",
  "amenity.grave_yard",
  "amenity.grit_bin",
  "amenity.gym",
  "amenity.hospital",
  "amenity.hunting_stand",
  "amenity.ice_cream",
  "amenity.internet_cafe",
  "amenity.kindergarten",
  "amenity.kitchen",
  "amenity.kneipp_water_cure",
  "amenity.language_school",
  "amenity.library",
  "amenity.marketplace",
  "amenity.monastery",
  "amenity.motorcycle_parking",
  "amenity.music_school",
  "amenity.nightclub",
  "amenity.nursing_home",
  "amenity.other",
  "amenity.parking",
  "amenity.parking_entrance",
  "amenity.parking_space",
  "amenity.pharmacy",
  "amenity.photo_booth",
  "amenity.place_of_worship",
  "amenity.planetarium",
  "amenity.police",
  "amenity.post_box",
  "amenity.post_office",
  "amenity.prison",
  "amenity.pub",
  "amenity.public_bookcase",
  "amenity.public_building",
  "amenity.ranger_station",
  "amenity.recycling",
  "amenity.refugee_site",
  "amenity.rescue_station",
  "amenity.restaurant",
  "amenity.sanitary_dump_station",
  "amenity.sauna",
  "amenity.school",
  "amenity.shelter",
  "amenity.shower",
  "amenity.social_centre",
  "amenity.social_facility",
  "amenity.stripclub",
  "amenity.studio",
  "amenity.swingerclub",
  "amenity.table",
  "amenity.taxi",
  "amenity.telephone",
  "amenity.theatre",
  "amenity.toilets",
  "amenity.townhall",
  "amenity.toy_library",
  "amenity.university",
  "amenity.vehicle_inspection",
  "amenity.vending_machine",
  "amenity.veterinary",
  "amenity.waste_basket",
  "amenity.waste_disposal",
  "amenity.waste_transfer_station",
  "amenity.water_point",
  "amenity.watering_place",
  "barrier.block",
  "barrier.bollard",
  "barrier.border_control",
  "barrier.bump_gate",
  "barrier.bus_trap",
  "barrier.cable_barrier",
  "barrier.cattle_grid",
  "barrier.chain",
  "barrier.city_wall",
  "barrier.cycle_barrier",
  "barrier.debris",
  "barrier.ditch",
  "barrier.entrance",
  "barrier.fence",
  "barrier.full-height_turnstile",
  "barrier.gate",
  "barrier.guard_rail",
  "barrier.hampshire_gate",
  "barrier.handrail",
  "barrier.hedge",
  "barrier.height_restrictor",
  "barrier.horse_stile",
  "barrier.jersey_barrier",
  "barrier.kent_carriage_gap",
  "barrier.kerb",
  "barrier.kissing_gate",
  "barrier.lift_gate",
  "barrier.log",
  "barrier.motorcycle_barrier",
  "barrier.other",
  "barrier.retaining_wall",
  "barrier.rope",
  "barrier.sally_port",
  "barrier.spikes",
  "barrier.stile",
  "barrier.sump_buster",
  "barrier.swing_gate",
  "barrier.tank_trap",
  "barrier.toll_booth",
  "barrier.turnstile",
  "barrier.wall",
  "barrier.yes",
  "border_type.baseline",
  "border_type.contiguous",
  "border_type.eez",
  "border_type.territorial",
  "boundary.aboriginal_lands",
  "boundary.administrative",
  "boundary.historic",
  "boundary.maritime",
  "boundary.marker",
  "boundary.national_park",
  "boundary.other",
  "boundary.political",
  "boundary.postal_code",
  "boundary.protected_area",
  "boundary.religious_administration",
  "building.apartments",
  "building.bakehouse",
  "building.barn",
  "building.bridge",
  "building.bungalow",
  "building.bunker",
  "building.cabin",
  "building.carport",
  "building.cathedral",
  "building.chapel",
  "building.church",
  "building.civic",
  "building.commercial",
  "building.conservatory",
  "building.construction",
  "building.cowshed",
  "building.detached",
  "building.digester",
  "building.dormitory",
  "building.farm",
  "building.farm_auxiliary",
  "building.fire_station",
  "building.garage",
  "building.garages",
  "building.ger",
  "building.government",
  "building.grandstand",
  "building.greenhouse",
  "building.hangar",
  "building.hospital",
  "building.hotel",
  "building.house",
  "building.houseboat",
  "building.hut",
  "building.industrial",
  "building.kindergarten",
  "building.kiosk",
  "building.mosque",
  "building.office",
  "building.other",
  "building.parking",
  "building.pavilion",
  "building.public",
  "building.religious",
  "building.residential",
  "building.retail",
  "building.riding_hall",
  "building.roof",
  "building.ruins",
  "building.school",
  "building.semidetached_house",
  "building.service",
  "building.shed",
  "building.shrine",
  "building.sports_hall",
  "building.stable",
  "building.stadium",
  "building.static_caravan",
  "building.sty",
  "building.supermarket",
  "building.synagogue",
  "building.temple",
  "building.terrace",
  "building.toilets",
  "building.train_station",
  "building.transformer_tower",
  "building.transportation",
  "building.tree_house",
  "building.university",
  "building.warehouse",
  "building.water_tower",
  "building.yes",
  "busway.lane",
  "communication.line",
  "craft.agricultural_engines",
  "craft.atelier",
  "craft.bakery",
  "craft.basket_maker",
  "craft.beekeeper",
  "craft.blacksmith",
  "craft.boatbuilder",
  "craft.bookbinder",
  "craft.brewery",
  "craft.builder",
  "craft.cabinet_maker",
  "craft.car_painter",
  "craft.carpenter",
  "craft.carpet_layer",
  "craft.caterer",
  "craft.chimney_sweeper",
  "craft.clockmaker",
  "craft.confectionary",
  "craft.cooper",
  "craft.dental_technician",
  "craft.distillery",
  "craft.door_construction",
  "craft.dressmaker",
  "craft.electrician",
  "craft.electronics_repair",
  "craft.embroiderer",
  "craft.engraver",
  "craft.floorer",
  "craft.gardener",
  "craft.glaziery",
  "craft.grinding_mill",
  "craft.handicraft",
  "craft.hvac",
  "craft.insulation",
  "craft.jeweller",
  "craft.joiner",
  "craft.key_cutter",
  "craft.locksmith",
  "craft.metal_construction",
  "craft.mint",
  "craft.musical_instrument",
  "craft.oil_mill",
  "craft.optician",
  "craft.organ_builder",
  "craft.other",
  "craft.painter",
  "craft.parquet_layer",
  "craft.photographer",
  "craft.photographic_laboratory",
  "craft.piano_tuner",
  "craft.plasterer",
  "craft.plumber",
  "craft.pottery",
  "craft.printer",
  "craft.printmaker",
  "craft.rigger",
  "craft.roofer",
  "craft.saddler",
  "craft.sailmaker",
  "craft.sawmill",
  "craft.scaffolder",
  "craft.sculptor",
  "craft.shoemaker",
  "craft.signmaker",
  "craft.stand_builder",
  "craft.stonemason",
  "craft.sun_protection",
  "craft.tailor",
  "craft.tiler",
  "craft.tinsmith",
  "craft.toolmaker",
  "craft.turner",
  "craft.upholsterer",
  "craft.watchmaker",
  "craft.water_well_drilling",
  "craft.window_construction",
  "craft.winery",
  "cycleway.lane",
  "cycleway.opposite",
  "cycleway.opposite_lane",
  "cycleway.opposite_share_busway",
  "cycleway.opposite_track",
  "cycleway.share_busway",
  "cycleway.shared_lane",
  "cycleway.track",
  "emergecy.dry_riser_inlet",
  "emergency.ambulance_station",
  "emergency.assembly_point",
  "emergency.defibrillator",
  "emergency.drinking_water",
  "emergency.emergency_ward_entrance",
  "emergency.fire_alarm_box",
  "emergency.fire_extinguisher",
  "emergency.fire_hydrant",
  "emergency.firehose",
  "emergency.landing_site",
  "emergency.life_ring",
  "emergency.lifeguard",
  "emergency.lifeguard_base",
  "emergency.lifeguard_platform",
  "emergency.lifeguard_tower",
  "emergency.other",
  "emergency.phone",
  "emergency.siren",
  "emergency.suction_point",
  "emergency.water_tank",
  "geological.moraine",
  "geological.other",
  "geological.outcrop",
  "geological.palaeontological_site",
  "highway.bridleway",
  "highway.bus_guideway",
  "highway.bus_stop",
  "highway.construction",
  "highway.corridor",
  "highway.crossing",
  "highway.cycleway",
  "highway.elevator",
  "highway.emergency_access_point",
  "highway.escape",
  "highway.footway",
  "highway.give_way",
  "highway.living_street",
  "highway.mini_roundabout",
  "highway.motorway",
  "highway.motorway_junction",
  "highway.motorway_link",
  "highway.other",
  "highway.passing_place",
  "highway.path",
  "highway.pedestrian",
  "highway.primary",
  "highway.primary_link",
  "highway.proposed",
  "highway.raceway",
  "highway.residential",
  "highway.rest_area",
  "highway.road",
  "highway.secondary",
  "highway.secondary_link",
  "highway.service",
  "highway.services",
  "highway.speed_camera",
  "highway.steps",
  "highway.stop",
  "highway.street_lamp",
  "highway.tertiary",
  "highway.tertiary_link",
  "highway.toll_gantry",
  "highway.track",
  "highway.traffic_mirror",
  "highway.traffic_signals",
  "highway.trailhead",
  "highway.trunk",
  "highway.trunk_link",
  "highway.turning_circle",
  "highway.turning_loop",
  "highway.unclassified",
  "historic.aircraft",
  "historic.aqueduct",
  "historic.archaeological_site",
  "historic.battlefield",
  "historic.boundary_stone",
  "historic.building",
  "historic.cannon",
  "historic.castle",
  "historic.castle_wall",
  "historic.church",
  "historic.city_gate",
  "historic.citywalls",
  "historic.farm",
  "historic.fort",
  "historic.gallows",
  "historic.highwater_mark",
  "historic.locomotive",
  "historic.manor",
  "historic.memorial",
  "historic.milestone",
  "historic.monastery",
  "historic.monument",
  "historic.optical_telegraph",
  "historic.other",
  "historic.pillory",
  "historic.railway_car",
  "historic.ruins",
  "historic.rune_stone",
  "historic.ship",
  "historic.tank",
  "historic.tomb",
  "historic.tower",
  "historic.tree_shrine",
  "historic.wayside_cross",
  "historic.wayside_shrine",
  "historic.wreck",
  "historic.yes",
  "landuse.allotments",
  "landuse.basin",
  "landuse.brownfield",
  "landuse.cemetery",
  "landuse.commercial",
  "landuse.conservation",
  "landuse.construction",
  "landuse.depot",
  "landuse.farmland",
  "landuse.farmyard",
  "landuse.forest",
  "landuse.garages",
  "landuse.grass",
  "landuse.greenfield",
  "landuse.greenhouse_horticulture",
  "landuse.industrial",
  "landuse.landfill",
  "landuse.meadow",
  "landuse.military",
  "landuse.orchard",
  "landuse.other",
  "landuse.pasture",
  "landuse.peat_cutting",
  "landuse.plant_nursery",
  "landuse.port",
  "landuse.quarry",
  "landuse.railway",
  "landuse.recreation_ground",
  "landuse.religious",
  "landuse.reservoir",
  "landuse.residential",
  "landuse.retail",
  "landuse.salt_pond",
  "landuse.village_green",
  "landuse.vineyard",
  "leisure.adult_gaming_centre",
  "leisure.amusement_arcade",
  "leisure.bandstand",
  "leisure.bird_hide",
  "leisure.common",
  "leisure.dance",
  "leisure.disc_golf_course",
  "leisure.dog_park",
  "leisure.escape_game",
  "leisure.firepit",
  "leisure.fishing",
  "leisure.fitness_centre",
  "leisure.garden",
  "leisure.hackerspace",
  "leisure.horse_riding",
  "leisure.ice_rink",
  "leisure.marina",
  "leisure.miniature_golf",
  "leisure.nature_reserve",
  "leisure.other",
  "leisure.park",
  "leisure.picnic_table",
  "leisure.pitch",
  "leisure.playground",
  "leisure.slipway",
  "leisure.sports_centre",
  "leisure.stadium",
  "leisure.summer_camp",
  "leisure.swimming_area",
  "leisure.swimming_pool",
  "leisure.track",
  "leisure.water_park",
  "lesure.beach_resort",
  "line.bay",
  "line.busbar",
  "man_made.adit",
  "man_made.beacon",
  "man_made.breakwater",
  "man_made.bridge",
  "man_made.bunker_silo",
  "man_made.carpet_hanger",
  "man_made.chimney",
  "man_made.clearcut",
  "man_made.communications_tower",
  "man_made.crane",
  "man_made.cross",
  "man_made.cutline",
  "man_made.dovecote",
  "man_made.dyke",
  "man_made.embankment",
  "man_made.flagpole",
  "man_made.gasometer",
  "man_made.goods_conveyor",
  "man_made.groyne",
  "man_made.kiln",
  "man_made.lighthouse",
  "man_made.mast",
  "man_made.mineshaft",
  "man_made.monitoring_station",
  "man_made.obelisk",
  "man_made.observatory",
  "man_made.offshore_platform",
  "man_made.other",
  "man_made.petroleum_well",
  "man_made.pier",
  "man_made.pipeline",
  "man_made.pumping_station",
  "man_made.reservoir_covered",
  "man_made.silo",
  "man_made.snow_fence",
  "man_made.snow_net",
  "man_made.storage_tank",
  "man_made.street_cabinet",
  "man_made.surveillance",
  "man_made.survey_point",
  "man_made.telescope",
  "man_made.tower",
  "man_made.wastewater_plant",
  "man_made.water_tap",
  "man_made.water_tower",
  "man_made.water_well",
  "man_made.water_works",
  "man_made.watermill",
  "man_made.wildlife_crossing",
  "man_made.windmill",
  "man_made.works",
  "military.airfield",
  "military.barracks",
  "military.bunker",
  "military.checkpoint",
  "military.danger_area",
  "military.naval_base",
  "military.nuclear_explosion_site",
  "military.obstacle_course",
  "military.office",
  "military.other",
  "military.range",
  "military.training_area",
  "military.trench",
  "natural.arete",
  "natural.bare_rock",
  "natural.bay",
  "natural.beach",
  "natural.blowhole",
  "natural.cape",
  "natural.cave_entrance",
  "natural.cliff",
  "natural.coastline",
  "natural.dune",
  "natural.fell",
  "natural.geyser",
  "natural.glacier",
  "natural.grassland",
  "natural.heath",
  "natural.hot_spring",
  "natural.isthmus",
  "natural.moor",
  "natural.mud",
  "natural.other",
  "natural.peak",
  "natural.peninsula",
  "natural.reef",
  "natural.ridge",
  "natural.rock",
  "natural.saddle",
  "natural.sand",
  "natural.scree",
  "natural.scrub",
  "natural.shingle",
  "natural.sinkhole",
  "natural.spring",
  "natural.stone",
  "natural.strait",
  "natural.tree",
  "natural.tree_row",
  "natural.valley",
  "natural.volcano",
  "natural.water",
  "natural.wetland",
  "natural.wood",
  "office.accountant",
  "office.adoption_agency",
  "office.advertising_agency",
  "office.architect",
  "office.association",
  "office.bail_bond_agent",
  "office.charity",
  "office.company",
  "office.consulting",
  "office.coworking",
  "office.diplomatic",
  "office.educational_institution",
  "office.employment_agency",
  "office.energy_supplier",
  "office.engineer",
  "office.estate_agent",
  "office.financial",
  "office.forestry",
  "office.foundation",
  "office.gedesist",
  "office.government",
  "office.graphic_design",
  "office.guide",
  "office.harbour_master",
  "office.insurance",
  "office.it",
  "office.lawyer",
  "office.logistics",
  "office.moving_company",
  "office.newspaper",
  "office.ngo",
  "office.notary",
  "office.other",
  "office.political_party",
  "office.private_investigator",
  "office.property_management",
  "office.quango",
  "office.religion",
  "office.research",
  "office.security",
  "office.surveyor",
  "office.tax",
  "office.tax_advisor",
  "office.telecommunication",
  "office.union",
  "office.visa",
  "office.water_utility",
  "place.allotments",
  "place.archipelago",
  "place.borough",
  "place.city",
  "place.city_block",
  "place.continent",
  "place.country",
  "place.county",
  "place.district",
  "place.farm",
  "place.hamlet",
  "place.island",
  "place.islet",
  "place.isolated_dwelling",
  "place.locality",
  "place.municipality",
  "place.neighbourhood",
  "place.ocean",
  "place.other",
  "place.plot",
  "place.province",
  "place.quarter",
  "place.region",
  "place.sea",
  "place.square",
  "place.state",
  "place.suburb",
  "place.town",
  "place.village",
  "power.cable",
  "power.catenary_mast",
  "power.compensator",
  "power.converter",
  "power.generator",
  "power.heliostat",
  "power.insulator",
  "power.line",
  "power.minor_line",
  "power.other",
  "power.plant",
  "power.pole",
  "power.portal",
  "power.substation",
  "power.switchgear",
  "power.terminal",
  "power.tower",
  "power.transformer",
  "public_transport.other",
  "public_transport.platform",
  "public_transport.station",
  "public_transport.stop_area",
  "public_transport.stop_position",
  "railway.abandoned",
  "railway.buffer_stop",
  "railway.construction",
  "railway.crossing",
  "railway.derail",
  "railway.disused",
  "railway.funicular",
  "railway.halt",
  "railway.level_crossing",
  "railway.light_rail",
  "railway.miniature",
  "railway.monorail",
  "railway.narrow_gauge",
  "railway.other",
  "railway.platform",
  "railway.preserved",
  "railway.rail",
  "railway.railway_crossing",
  "railway.roundhouse",
  "railway.signal",
  "railway.station",
  "railway.subway",
  "railway.subway_entrance",
  "railway.switch",
  "railway.tram",
  "railway.tram_stop",
  "railway.traverser",
  "railway.turntable",
  "railway.wash",
  "route.bicycle",
  "route.bus",
  "route.canoe",
  "route.detour",
  "route.ferry",
  "route.foot",
  "route.hiking",
  "route.horse",
  "route.inline_skates",
  "route.light_rail",
  "route.mtb",
  "route.other",
  "route.piste",
  "route.power",
  "route.railway",
  "route.road",
  "route.running",
  "route.ski",
  "route.subway",
  "route.tracks",
  "route.train",
  "route.tram",
  "route.trolleybus",
  "seamark:type.anchor_berth",
  "seamark:type.anchorage",
  "seamark:type.beacon_cardinal",
  "seamark:type.beacon_isolated_danger",
  "seamark:type.beacon_lateral",
  "seamark:type.beacon_safe_water",
  "seamark:type.beacon_special_purpose",
  "seamark:type.berth",
  "seamark:type.bridge",
  "seamark:type.building",
  "seamark:type.bunker_station",
  "seamark:type.buoy_cardinal",
  "seamark:type.buoy_installation",
  "seamark:type.buoy_isolated_danger",
  "seamark:type.buoy_lateral",
  "seamark:type.buoy_safe_water",
  "seamark:type.buoy_special_purpose",
  "seamark:type.cable_area",
  "seamark:type.cable_overhead",
  "seamark:type.cable_submarine",
  "seamark:type.calling-in_point",
  "seamark:type.causeway",
  "seamark:type.checkpoint",
  "seamark:type.coastguard_station",
  "seamark:type.communication_area",
  "seamark:type.control_point",
  "seamark:type.daymark",
  "seamark:type.distance_mark",
  "seamark:type.dredged_area",
  "seamark:type.dumping_ground",
  "seamark:type.exceptional_structure",
  "seamark:type.fairway",
  "seamark:type.ferry_route",
  "seamark:type.fishing_facility",
  "seamark:type.fog_signal",
  "seamark:type.fortified_structure",
  "seamark:type.gate",
  "seamark:type.gridirom",
  "seamark:type.harbour",
  "seamark:type.harbour_basin",
  "seamark:type.hulk",
  "seamark:type.inshore_traffic_zone",
  "seamark:type.landmark",
  "seamark:type.light",
  "seamark:type.light_float",
  "seamark:type.light_major",
  "seamark:type.light_minor",
  "seamark:type.light_vessel",
  "seamark:type.lock_basin",
  "seamark:type.marine_farm",
  "seamark:type.military_area",
  "seamark:type.mooring",
  "seamark:type.navigation_line",
  "seamark:type.notice",
  "seamark:type.obstruction",
  "seamark:type.oil_barrier",
  "seamark:type.pile",
  "seamark:type.pilot_boarding",
  "seamark:type.pipeline_area",
  "seamark:type.pipeline_overhead",
  "seamark:type.pipeline_submarine",
  "seamark:type.platform",
  "seamark:type.pontoon",
  "seamark:type.precautionary_area",
  "seamark:type.production_area",
  "seamark:type.protected_area",
  "seamark:type.pylon",
  "seamark:type.radar_line",
  "seamark:type.radar_range",
  "seamark:type.radar_reflector",
  "seamark:type.radar_station",
  "seamark:type.radar_transponder",
  "seamark:type.radio_station",
  "seamark:type.recommended_route_centreline",
  "seamark:type.recommended_track",
  "seamark:type.recommended_traffic_lane",
  "seamark:type.rescue_station",
  "seamark:type.restricted_area",
  "seamark:type.retro_reflector",
  "seamark:type.rock",
  "seamark:type.sand_waves",
  "seamark:type.sea_area",
  "seamark:type.seabed_area",
  "seamark:type.seaplane_landing_area",
  "seamark:type.separation_boundary",
  "seamark:type.separation_crossing",
  "seamark:type.separation_lane",
  "seamark:type.separation_line",
  "seamark:type.separation_roundabout",
  "seamark:type.separation_zone",
  "seamark:type.shoreline_construction",
  "seamark:type.signal_station_traffic",
  "seamark:type.signal_station_warning",
  "seamark:type.small_craft_facility",
  "seamark:type.spring",
  "seamark:type.submarine_transit_lane",
  "seamark:type.tank",
  "seamark:type.topmark",
  "seamark:type.turning_basin",
  "seamark:type.two-way_route",
  "seamark:type.vegetation",
  "seamark:type.vehicle_transfer",
  "seamark:type.virtual_aton",
  "seamark:type.wall",
  "seamark:type.water_turbulence",
  "seamark:type.waterway_gauge",
  "seamark:type.weed",
  "seamark:type.wreck",
  "shop.agrarian",
  "shop.alcohol",
  "shop.anime",
  "shop.antiques",
  "shop.appliance",
  "shop.art",
  "shop.atv",
  "shop.baby_goods",
  "shop.bag",
  "shop.bakery",
  "shop.bathroom_furnishing",
  "shop.beauty",
  "shop.bed",
  "shop.beverages",
  "shop.bicycle",
  "shop.boat",
  "shop.bookmaker",
  "shop.books",
  "shop.boutique",
  "shop.brewing_supplies",
  "shop.butcher",
  "shop.camera",
  "shop.candles",
  "shop.cannabis",
  "shop.car",
  "shop.car_parts",
  "shop.car_repair",
  "shop.caravan",
  "shop.carpet",
  "shop.charity",
  "shop.cheese",
  "shop.chemist",
  "shop.chocolate",
  "shop.clothes",
  "shop.coffee",
  "shop.collector",
  "shop.computer",
  "shop.confectionery",
  "shop.convenience",
  "shop.copyshop",
  "shop.cosmetics",
  "shop.craft",
  "shop.curtain",
  "shop.dairy",
  "shop.deli",
  "shop.department_store",
  "shop.doityourself",
  "shop.doors",
  "shop.dry_cleaning",
  "shop.e-cigarette",
  "shop.electrical",
  "shop.electronics",
  "shop.energy",
  "shop.erotic",
  "shop.fabric",
  "shop.farm",
  "shop.fashion",
  "shop.fashion_accessories",
  "shop.fireplace",
  "shop.fishing",
  "shop.flooring",
  "shop.florist",
  "shop.frame",
  "shop.free_flying",
  "shop.frozen_food",
  "shop.fuel",
  "shop.funeral_directors",
  "shop.furniture",
  "shop.games",
  "shop.garden_centre",
  "shop.garden_furniture",
  "shop.gas",
  "shop.general",
  "shop.gift",
  "shop.glaziery",
  "shop.golf",
  "shop.greengrocer",
  "shop.hairdresser",
  "shop.hairdresser_supply",
  "shop.hardware",
  "shop.health_food",
  "shop.hearing_aids",
  "shop.herbalist",
  "shop.hifi",
  "shop.household_linen",
  "shop.houseware",
  "shop.hunting",
  "shop.ice_cream",
  "shop.interior_decoration",
  "shop.jetski",
  "shop.jewelry",
  "shop.kiosk",
  "shop.kitchen",
  "shop.lamps",
  "shop.laundry",
  "shop.leather",
  "shop.lighting",
  "shop.locksmith",
  "shop.lottery",
  "shop.mall",
  "shop.massage",
  "shop.medical_supply",
  "shop.military_surplus",
  "shop.mobile_phone",
  "shop.model",
  "shop.money_lender",
  "shop.motorcycle",
  "shop.music",
  "shop.musical_instrument",
  "shop.newsagent",
  "shop.nutrition_supplements",
  "shop.optician",
  "shop.organic",
  "shop.other",
  "shop.outdoor",
  "shop.outpost",
  "shop.paint",
  "shop.party",
  "shop.pasta",
  "shop.pastry",
  "shop.pawnbroker",
  "shop.perfumery",
  "shop.pest_control",
  "shop.pet",
  "shop.pet_grooming",
  "shop.photo",
  "shop.pyrotechnics",
  "shop.radiotechnics",
  "shop.religion",
  "shop.robot",
  "shop.scuba_diving",
  "shop.seafood",
  "shop.second_hand",
  "shop.security",
  "shop.sewing",
  "shop.shoes",
  "shop.ski",
  "shop.snowmobile",
  "shop.spices",
  "shop.sports",
  "shop.stationery",
  "shop.storage_rental",
  "shop.supermarket",
  "shop.swimming_pool",
  "shop.tailor",
  "shop.tattoo",
  "shop.tea",
  "shop.ticket",
  "shop.tiles",
  "shop.tobacco",
  "shop.toys",
  "shop.trade",
  "shop.trailer",
  "shop.travel_agency",
  "shop.trophy",
  "shop.tyres",
  "shop.vacant",
  "shop.vacuum_cleaner",
  "shop.variety_store",
  "shop.video",
  "shop.video_games",
  "shop.watches",
  "shop.water",
  "shop.weapons",
  "shop.wholesale",
  "shop.window_blind",
  "shop.wine",
  "shop.wool",
  "sport.10pin",
  "sport.9pin",
  "sport.aikido",
  "sport.american_football",
  "sport.archery",
  "sport.athletics",
  "sport.australian_football",
  "sport.badminton",
  "sport.bandy",
  "sport.baseball",
  "sport.basketball",
  "sport.beachvolleyball",
  "sport.biathlon",
  "sport.billiards",
  "sport.bmx",
  "sport.bobsleigh",
  "sport.boules",
  "sport.bowls",
  "sport.boxing",
  "sport.bullfighting",
  "sport.canadian_football",
  "sport.canoe",
  "sport.chess",
  "sport.cliff_diving",
  "sport.climbing",
  "sport.climbing_adventure",
  "sport.cockfighting",
  "sport.cricket",
  "sport.croquet",
  "sport.crossfit",
  "sport.curling",
  "sport.cycling",
  "sport.darts",
  "sport.diving",
  "sport.dog_agility",
  "sport.dog_racing",
  "sport.equestrian",
  "sport.fencing",
  "sport.field_hockey",
  "sport.fitness",
  "sport.floorball",
  "sport.football",
  "sport.free_flying",
  "sport.futsal",
  "sport.gaelic_games",
  "sport.golf",
  "sport.gymnastics",
  "sport.handball",
  "sport.hapkido",
  "sport.hockey",
  "sport.horse_racing",
  "sport.horseshoes",
  "sport.ice_hockey",
  "sport.ice_skating",
  "sport.ice_stock",
  "sport.judo",
  "sport.karate",
  "sport.karting",
  "sport.kickboxing",
  "sport.kitesurfing",
  "sport.korfball",
  "sport.krachtbal",
  "sport.lacrosse",
  "sport.martial_arts",
  "sport.miniature_golf",
  "sport.model_aerodrome",
  "sport.motocross",
  "sport.motor",
  "sport.multi",
  "sport.netball",
  "sport.obstacle_course",
  "sport.orienteering",
  "sport.other",
  "sport.paddle_tennis",
  "sport.padel",
  "sport.parachuting",
  "sport.paragliding",
  "sport.parkour",
  "sport.pelota",
  "sport.pes\xE4pallo",
  "sport.pickleball",
  "sport.pilates",
  "sport.racquet",
  "sport.rc_car",
  "sport.roller_skating",
  "sport.rowing",
  "sport.rugby_league",
  "sport.rugby_union",
  "sport.running",
  "sport.safety_training",
  "sport.sailing",
  "sport.scuba_diving",
  "sport.shooting",
  "sport.shot-put",
  "sport.skateboard",
  "sport.skating",
  "sport.ski_jumping",
  "sport.skiing",
  "sport.snooker",
  "sport.soccer",
  "sport.speedway",
  "sport.squash",
  "sport.sumo",
  "sport.surfing",
  "sport.swimming",
  "sport.table_soccer",
  "sport.table_tennis",
  "sport.taekwondo",
  "sport.tennis",
  "sport.toboggan",
  "sport.ultimate",
  "sport.volleyball",
  "sport.wakeboarding",
  "sport.water_polo",
  "sport.water_ski",
  "sport.weightlifting",
  "sport.wrestling",
  "sport.yoga",
  "telecom.connection_point",
  "telecom.data_center",
  "telecom.distribution_point",
  "telecom.exchange",
  "telecom.other",
  "telecom.service_device",
  "tourism.alpine_hut",
  "tourism.apartment",
  "tourism.aquarium",
  "tourism.artwork",
  "tourism.attraction",
  "tourism.camp_pitch",
  "tourism.camp_site",
  "tourism.caravan_site",
  "tourism.chalet",
  "tourism.gallery",
  "tourism.guest_house",
  "tourism.hostel",
  "tourism.hotel",
  "tourism.information",
  "tourism.motel",
  "tourism.museum",
  "tourism.other",
  "tourism.picnic_site",
  "tourism.theme_park",
  "tourism.viewpoint",
  "tourism.wilderness_hut",
  "tourism.zoo",
  "waterway.boatyard",
  "waterway.canal",
  "waterway.dam",
  "waterway.ditch",
  "waterway.dock",
  "waterway.drain",
  "waterway.drystream",
  "waterway.fairway",
  "waterway.fuel",
  "waterway.lock_gate",
  "waterway.other",
  "waterway.pressurised",
  "waterway.river",
  "waterway.riverbank",
  "waterway.stream",
  "waterway.tidal_channel",
  "waterway.turning_point",
  "waterway.wadi",
  "waterway.water_point",
  "waterway.waterfall",
  "waterway.weir"
];

// prepare.mjs
var featureCount = features_default.length;
function Prepare(opts) {
  if (!(this instanceof Prepare))
    return new Prepare(opts);
  this.style = opts.styleTexture;
  this.pixels = opts.stylePixels;
  this.data = opts.decoded;
  this.zoomCount = opts.zoomEnd - opts.zoomStart;
  this.imageSize = opts.imageSize;
  featureCount = typeof opts.featureCount === "number" ? opts.featureCount : featureCount;
  var propsLineP = typeof opts.propsLineP === "function" ? opts.propsLineP : identity;
  var propsArea = typeof opts.propsArea === "function" ? opts.propsArea : identity;
  this.indexes = {
    point: new Uint32Array(this.data.point.types.length),
    line: new Uint32Array(this.data.line.types.length),
    area: new Uint32Array(this.data.area.types.length),
    areaBorder: new Uint32Array(this.data.areaBorder.types.length)
  };
  for (var i = 0; i < this.indexes.point.length; i++) {
    this.indexes.point[i] = i;
  }
  for (var i = 0; i < this.indexes.line.length; i++) {
    this.indexes.line[i] = i;
  }
  for (var i = 0; i < this.indexes.area.length; i++) {
    this.indexes.area[i] = i;
  }
  for (var i = 0; i < this.indexes.areaBorder.length; i++) {
    this.indexes.areaBorder[i] = i;
  }
  var pointIndexes = makeIndexes(this.data.point.ids);
  var lineIndexes = makeIndexes(this.data.line.ids);
  var areaIndexes = makeIndexes(this.data.area.ids);
  var areaBorderIndexes = makeIndexes(this.data.areaBorder.ids);
  this.ldistances = [0, 0];
  var ldistx = 0;
  var ldisty = 0;
  var lids = this.data.line.ids;
  var lposits = this.data.line.positions;
  for (var i = 0; i < lids.length - 1; i++) {
    if (lids[i] === lids[i + 1]) {
      ldistx += Math.abs(lposits[2 * i] - lposits[2 * i + 2]);
      ldisty += Math.abs(lposits[2 * i + 1] - lposits[2 * i + 3]);
    } else {
      ldistx = 0;
      ldisty = 0;
    }
    if (isNaN(ldistx) || isNaN(ldisty)) {
      ldistx = 0;
      ldisty = 0;
    }
    this.ldistances.push(ldistx, ldisty);
  }
  this.abdistances = [0, 0];
  var abdistx = 0;
  var abdisty = 0;
  var abids = this.data.areaBorder.ids;
  var abposits = this.data.areaBorder.positions;
  for (var i = 0; i < abids.length - 1; i++) {
    if (abids[i] === abids[i + 1]) {
      abdistx += Math.abs(abposits[2 * i] - abposits[2 * i + 2]);
      abdisty += Math.abs(abposits[2 * i + 1] - abposits[2 * i + 3]);
    } else {
      abdistx = 0;
      abdisty = 0;
    }
    if (isNaN(abdistx) || isNaN(abdisty)) {
      abdistx = 0;
      abdisty = 0;
    }
    this.abdistances.push(abdistx, abdisty);
  }
  this.props = {
    point: {
      positions: null,
      types: null,
      id: null,
      indexes: pointIndexes.indexes,
      indexToId: pointIndexes.indexToId,
      idToIndex: pointIndexes.idToIndex,
      labels: this.data.point.labels,
      style: this.style,
      imageSize: this.imageSize,
      featureCount
    },
    pointT: {
      positions: null,
      types: null,
      id: null,
      indexes: null,
      indexToId: null,
      idToIndex: null,
      labels: this.data.point.labels,
      style: this.style,
      imageSize: this.imageSize,
      featureCount
    },
    pointP: {
      positions: null,
      types: null,
      id: null,
      indexes: null,
      indexToId: null,
      idToIndex: null,
      labels: this.data.point.labels,
      style: this.style,
      imageSize: this.imageSize,
      featureCount
    },
    line: {
      positions: null,
      types: null,
      id: null,
      normals: this.data.line.normals,
      distances: this.ldistances,
      indexes: lineIndexes.indexes,
      indexToId: lineIndexes.indexToId,
      idToIndex: lineIndexes.idToIndex,
      labels: this.data.line.labels,
      style: this.style,
      imageSize: this.imageSize,
      featureCount
    },
    lineT: {
      positions: null,
      types: null,
      id: null,
      normals: null,
      distances: null,
      indexes: null,
      indexToId: null,
      idToIndex: null,
      labels: this.data.line.labels,
      style: this.style,
      imageSize: this.imageSize,
      featureCount
    },
    lineP: propsLineP({
      positions: null,
      types: null,
      id: null,
      normals: null,
      distances: null,
      indexes: null,
      indexToId: null,
      idToIndex: null,
      labels: this.data.line.labels,
      style: this.style,
      imageSize: this.imageSize,
      featureCount
    }),
    area: propsArea({
      positions: this.data.area.positions,
      types: this.data.area.types,
      indexes: areaIndexes.indexes,
      id: this.data.area.ids,
      indexToId: areaIndexes.indexToId,
      idToIndex: areaIndexes.idToIndex,
      cells: this.data.area.cells,
      labels: this.data.area.labels,
      style: this.style,
      imageSize: this.imageSize,
      featureCount
    }),
    areaT: {
      positions: this.data.area.positions,
      types: this.data.area.types,
      indexes: areaIndexes.indexes,
      id: this.data.area.ids,
      indexToId: areaIndexes.indexToId,
      idToIndex: areaIndexes.idToIndex,
      cells: null,
      labels: this.data.area.labels,
      style: this.style,
      imageSize: this.imageSize,
      featureCount
    },
    areaP: {
      positions: this.data.area.positions,
      types: this.data.area.types,
      indexes: areaIndexes.indexes,
      id: this.data.area.ids,
      indexToId: areaIndexes.indexToId,
      idToIndex: areaIndexes.idToIndex,
      cells: null,
      labels: this.data.area.labels,
      style: this.style,
      imageSize: this.imageSize,
      featureCount
    },
    areaBorder: {
      positions: null,
      types: null,
      id: null,
      normals: this.data.areaBorder.normals,
      distances: this.abdistances,
      //indexes: areaBorderIndexes.indexes,
      //indexToId: areaBorderIndexes.indexToId,
      //idToIndex: areaBorderIndexes.idToIndex,
      indexes: null,
      indexToId: null,
      idToIndex: null,
      style: this.style,
      imageSize: this.imageSize,
      featureCount
    },
    areaBorderT: {
      positions: null,
      types: null,
      id: null,
      normals: null,
      distances: null,
      indexes: null,
      indexToId: null,
      idToIndex: null,
      style: this.style,
      imageSize: this.imageSize,
      featureCount
    },
    areaBorderP: {
      positions: null,
      types: null,
      id: null,
      normals: null,
      distances: null,
      indexes: null,
      indexToId: null,
      idToIndex: null,
      style: this.style,
      imageSize: this.imageSize,
      featureCount
    }
  };
}
Prepare.prototype._splitSort = function(key, zoom) {
  var self = this;
  var tkey = key + "T";
  var pkey = key + "P";
  var splitT = (0, import_partition_array.default)(this.indexes[key], function(i2) {
    var opacity = self.getOpacity(key, self.data[key].types[i2], zoom);
    return opacity > 100;
  });
  this.indexes[tkey] = this.indexes[key].subarray(0, splitT);
  this.indexes[pkey] = this.indexes[key].subarray(splitT);
  this.indexes[tkey].sort(function(a, b) {
    var xa = self.data[key].types[a];
    var xb = self.data[key].types[b];
    var zindexa = self.pixels[(xa + (zoom * 2 + 1) * self.imageSize[0]) * 4 + 1];
    var zindexb = self.pixels[(xb + (zoom * 2 + 1) * self.imageSize[0]) * 4 + 1];
    return zindexa - zindexb;
  });
  self.props[tkey].id = [];
  self.props[tkey].types = [];
  self.props[tkey].positions = [];
  self.props[pkey].id = [];
  self.props[pkey].types = [];
  self.props[pkey].positions = [];
  if (self.props[key].normals) {
    self.props[tkey].normals = [];
    self.props[pkey].normals = [];
  }
  if (self.props[key].distances) {
    self.props[tkey].distances = [];
    self.props[pkey].distances = [];
  }
  for (var i = 0; i < self.indexes[tkey].length; i++) {
    self.props[tkey].id.push(self.data[key].ids[self.indexes[tkey][i]]);
    self.props[tkey].types.push(self.data[key].types[self.indexes[tkey][i]]);
    self.props[tkey].positions.push(self.data[key].positions[self.indexes[tkey][i] * 2]);
    self.props[tkey].positions.push(self.data[key].positions[self.indexes[tkey][i] * 2 + 1]);
    if (self.props[key].normals) {
      self.props[tkey].normals.push(self.data[key].normals[self.indexes[tkey][i] * 2]);
      self.props[tkey].normals.push(self.data[key].normals[self.indexes[tkey][i] * 2 + 1]);
    }
    if (self.props[key].distances) {
      if (key === "line") {
        self.props[tkey].distances.push(this.ldistances[self.indexes[tkey][i] * 2]);
        self.props[tkey].distances.push(this.ldistances[self.indexes[tkey][i] * 2 + 1]);
      } else if (key === "areaBorder") {
        self.props[tkey].distances.push(this.abdistances[self.indexes[tkey][i] * 2]);
        self.props[tkey].distances.push(this.abdistances[self.indexes[tkey][i] * 2 + 1]);
      }
    }
  }
  for (var i = 0; i < self.indexes[pkey].length; i++) {
    self.props[pkey].id.push(self.data[key].ids[self.indexes[pkey][i]]);
    self.props[pkey].types.push(self.data[key].types[self.indexes[pkey][i]]);
    self.props[pkey].positions.push(self.data[key].positions[self.indexes[pkey][i] * 2]);
    self.props[pkey].positions.push(self.data[key].positions[self.indexes[pkey][i] * 2 + 1]);
    if (self.props[pkey].normals) {
      self.props[pkey].normals.push(self.data[key].normals[self.indexes[pkey][i] * 2]);
      self.props[pkey].normals.push(self.data[key].normals[self.indexes[pkey][i] * 2 + 1]);
    }
    if (self.props[key].distances) {
      if (key === "line") {
        self.props[pkey].distances.push(this.ldistances[self.indexes[pkey][i] * 2]);
        self.props[pkey].distances.push(this.ldistances[self.indexes[pkey][i] * 2 + 1]);
      } else if (key === "areaBorder") {
        self.props[pkey].distances.push(this.abdistances[self.indexes[pkey][i] * 2]);
        self.props[pkey].distances.push(this.abdistances[self.indexes[pkey][i] * 2 + 1]);
      }
    }
  }
  var tindexes = makeIndexes(self.props[tkey].id);
  var pindexes = makeIndexes(self.props[pkey].id);
  self.props[tkey].indexes = tindexes.indexes;
  self.props[tkey].indexToId = tindexes.indexToId;
  self.props[tkey].idToIndex = tindexes.idToIndex;
  self.props[pkey].indexes = pindexes.indexes;
  self.props[pkey].indexToId = pindexes.indexToId;
  self.props[pkey].idToIndex = pindexes.idToIndex;
};
Prepare.prototype._splitSortArea = function(key, zoom) {
  var self = this;
  var tkey = key + "T";
  var pkey = key + "P";
  self.props[tkey].cells = [];
  self.props[pkey].cells = [];
  var cells = self.data[key].cells;
  for (var i = 0; i < cells.length; i += 3) {
    var type = self.data[key].types[cells[i]];
    var opacity = self.getOpacity(key, type, zoom);
    if (opacity < 100) {
      self.props[tkey].cells.push(cells[i], cells[i + 1], cells[i + 2]);
    } else {
      self.props[pkey].cells.push(cells[i], cells[i + 1], cells[i + 2]);
    }
  }
};
Prepare.prototype.update = function(zoom) {
  var self = this;
  this._splitSort("point", zoom);
  this._splitSort("line", zoom);
  this._splitSort("areaBorder", zoom);
  this._splitSortArea("area", zoom);
  return this.props;
};
Prepare.prototype.getOpacity = function(key, type, zoom) {
  if (key === "point") {
    var y = zoom * 7;
  } else if (key === "line") {
    var y = zoom * 7 + this.zoomCount * 8;
  } else if (key === "area") {
    var y = zoom * 7 + this.zoomCount * 8 + this.zoomCount * 6;
  } else if (key === "areaBorder") {
    var y = zoom * 7 + this.zoomCount * 8 + this.zoomCount * 6 + this.zoomCount * 3;
  }
  var index = (type + y * this.imageSize[0]) * 4 + 3;
  return this.pixels[index];
};
function makeIndexes(ids) {
  var indexToId = {};
  var idToIndex = {};
  var indexes = new Float32Array(ids.length);
  var x = 1;
  ids.forEach(function(id) {
    if (!idToIndex.hasOwnProperty(id)) {
      idToIndex[id] = x;
      indexToId[x] = id;
      x++;
    }
  });
  ids.forEach(function(id, i) {
    indexes[i] = idToIndex[id];
  });
  return {
    indexes,
    idToIndex,
    indexToId
  };
}
function identity(x) {
  return x;
}
export {
  Prepare as default
};
